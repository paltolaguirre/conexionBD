package automigrateFunction

import (
	"github.com/jinzhu/gorm"
	"github.com/xubiosueldos/conexionBD/Function/structFunction"
)

func AutomigrateFunctionTablasPrivadas(db *gorm.DB) error {

	//para actualizar tablas...agrega columnas e indices, pero no elimina
	err := db.AutoMigrate(&structFunction.Invoke{}, &structFunction.Value{}, &structFunction.Param{}, &structFunction.Function{}).Error
	if err == nil {
		db.Model(&structFunction.Param{}).AddForeignKey("functionname", "function(name)", "CASCADE", "CASCADE")
		db.Model(&structFunction.Function{}).AddForeignKey("valueid", "value(id)", "CASCADE", "CASCADE")
		db.Model(&structFunction.Invoke{}).AddForeignKey("functionname", "function(name)", "CASCADE", "CASCADE")
		db.Model(&structFunction.Value{}).AddForeignKey("valueinvokeid", "invoke(id)", "CASCADE", "CASCADE")
	}
	return err

}

func AutomigrateFunctionTablasPublicas(db *gorm.DB) error {
	//para actualizar tablas...agrega columnas e indices, pero no elimina
	err := db.AutoMigrate(&structFunction.Value{}, &structFunction.Invoke{}, &structFunction.Param{}, &structFunction.Function{}).Error
	if err == nil {
		versionFunctionDB := ObtenerVersionFunctionDB(db)
		if versionFunctionDB < 1 {
			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-1,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('GetParamValue', current_timestamp, 'Obtiene el valor de un parametro de la formula', 'primitive', 'internal', 'public', 'number', -1)")
			db.Exec("INSERT INTO param(id, created_at, name, type, functionname) VALUES(-1, current_timestamp, 'paramName', 'string', 'GetParamValue')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-2,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Sum', current_timestamp, 'Dado dos valores obtiene la suma de ambos', 'primitive', 'operator', 'public', 'number', -2)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-2,current_timestamp,'val1','number','Sum')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-3,current_timestamp,'val2','number','Sum')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-3,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('TotalImporteRemunerativo', current_timestamp, 'Dada una liquidacion obtiene la suma total de importes remunerativos de la misma', 'primitive', 'helper', 'public', 'number', -3)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-4,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('ImpuestoALasGanancias', current_timestamp, '', 'primitive', 'helper', 'public', 'number', -4)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-5,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('ImpuestoALasGananciasDevolucion', current_timestamp, '', 'primitive', 'helper', 'public', 'number', -5)")
		}
		
		if versionFunctionDB < 2 {

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-6,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Sueldo', current_timestamp, 'Sueldo ingresado en el campo Remuneración del Legajo', 'primitive', 'helper', 'public', 'number', -6)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-7,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('HorasMensuales', current_timestamp, 'Horas ingresadas en el campo Horas Mensuales Normales del legajo', 'primitive', 'helper', 'public', 'number', -7)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-8,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasMesTrabajadosFechaLiquidacion', current_timestamp, 'Cantidad de dias desde el primero del mes hasta la fecha de la liquidación', 'primitive', 'helper', 'public', 'number', -8)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-9,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasMesTrabajadosFechaPeriodo', current_timestamp, 'Cantidad de dias desde el primero del mes hasta el último día del período liquidado', 'primitive', 'helper', 'public', 'number', -9)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-10,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemRemunerativaSemestre', current_timestamp, 'Mejor Remuneración del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre), comparando grillas de (Remunerativo - Desacuentos)', 'primitive', 'helper', 'public', 'number', -10)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-11,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasSemTrabajados', current_timestamp, 'Dias Trabajados en el Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre)', 'primitive', 'helper', 'public', 'number', -11)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-12,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemNoRemunerativaSemestre', current_timestamp, 'Mejor Remuneración No Remunerativa del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre)', 'primitive', 'helper', 'public', 'number', -12)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-13,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('ValorDiasVacaciones', current_timestamp, 'Valor de los días correspondientes a las Vacaciones', 'primitive', 'helper', 'public', 'number', -13)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-14, current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('TotalHaberesNoRemunerativosMensual', current_timestamp, 'Total de conceptos no remunerativos de la liquidación', 'primitive', 'helper', 'public', 'number', -14)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-15,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('TotalAportesPatronalesMensual', current_timestamp, 'Total de conceptos de aportes patronales de la liquidación', 'primitive', 'helper', 'public', 'number', -15)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-16,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('TotalRetencionesMensual', current_timestamp, 'Total de conceptos de retenciones de la liquidación', 'primitive', 'helper', 'public', 'number', -16)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-17,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('CantidadMesesTrabajados', current_timestamp, 'La cantidad de meses trabajados desde  Legajo > Fecha de Ingreso  hasta la Fecha de la liquidación', 'primitive', 'helper', 'public', 'number', -17)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-18,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasLicenciaMes', current_timestamp, 'Cantidad de días de licencias del mes de liquidación', 'primitive', 'helper', 'public', 'number', -18)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-19,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasLicenciaSemestre', current_timestamp, 'Cantidad de días de licencias del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre)', 'primitive', 'helper', 'public', 'number', -19)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-20,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('TotalDescuentosMensual', current_timestamp, 'Total de conceptos de descuentos de la liquidación', 'primitive', 'helper', 'public', 'number', -20)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-21,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemNormalYHabitualSemestre', current_timestamp, 'Mejor remuneración normal y habitual del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre)', 'primitive', 'helper', 'public', 'number', -21)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-22,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasEfectivamenteTrabajadosSemestre', current_timestamp, 'Cantidad de días efectivamente trabajados en el Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre). Días hábiles - Días Faltas injustificadas - Días enfermedad - Días accidente - Días de Licencia', 'primitive', 'helper', 'public', 'number', -22)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-23,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('FechadeIngreso', current_timestamp, 'Fecha de ingreso del Legajo', 'primitive', 'helper', 'public', 'Time', -23)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-24,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('FechadeLiquidacion', current_timestamp, 'Fecha de la liquidación donde se esta utilizando el concepto', 'primitive', 'helper', 'public', 'Time', -24)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-25,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('FecIngHASTAFecLiq', current_timestamp, 'Fecha de Ingreso hasta Fecha de Liquidacion expresada en años', 'primitive', 'helper', 'public', 'number', -25)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-26,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('AntiguedadResto', current_timestamp, ' ( (Dias desde la Fecha Ingreso hasta la Fecha Liquidación) / 365 ) - antiguedad', 'primitive', 'helper', 'public', 'number', -26)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-27,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemTotalSemestre', current_timestamp, 'Mejor remuneración total del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre). Comparando las grillas de Remunerativo - Descuentos + No Remunerativo', 'primitive', 'helper', 'public', 'number', -27)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-28,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemTotalAnual', current_timestamp, 'Mejor remuneración total del año. Comparando las grillas de Remunerativo - Descuentos + No Remunerativo', 'primitive', 'helper', 'public', 'number', -28)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-29,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemTotalSinRemVarSemestre', current_timestamp, 'Mejor remuneración total, sin incluir Remuneraciones Variables del Semestre. Comparando las grillas de Remunerativo - Descuentos + No Remunerativo', 'primitive', 'helper', 'public', 'number', -29)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-30,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemTotalSinRemVarAnual', current_timestamp, 'Mejor remuneración total, sin remuneraciones variables del año liquidado. Comparando las grillas de Remunerativo - Descuentos + No Remunerativo', 'primitive', 'helper', 'public', 'number', -30)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-31,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('PromRemVariablesSemestre', current_timestamp, 'Promedio remuneraciones variables del Semestre', 'primitive', 'helper', 'public', 'number', -31)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-32,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('PromRemVariablesAnual', current_timestamp, 'Promedio remuneraciones variables del Año Liquidado', 'primitive', 'helper', 'public', 'number', -32)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-33,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('MejorRemRemunerativaBaseSACSemestre', current_timestamp, 'Mejor Remuneración del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre), comparando grillas de Remunerativo - Descuentos solo de los conceptos que tienen configurado BASE_SAC = SI', 'primitive', 'helper', 'public', 'number', -33)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-34,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('GetConceptValue', current_timestamp, 'Obtiene el valor de un concepto', 'primitive', 'internal', 'public', 'number', -34)")
			db.Exec("INSERT INTO param(id, created_at, name, type, functionname) VALUES(-4, current_timestamp, 'conceptid', 'number', 'GetConceptValue')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-35,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('If', current_timestamp, 'Retorna el primer valor si la condicion es verdadera y el segundo valor si la condicion es falsa', 'primitive', 'operator', 'public', 'number', -35)")
			db.Exec("INSERT INTO param(id, created_at, name, type, functionname) VALUES(-7, current_timestamp, 'condicion', 'boolean', 'If')")
			db.Exec("INSERT INTO param(id, created_at, name, type, functionname) VALUES(-6, current_timestamp, 'valueTrue', 'number', 'If')")
			db.Exec("INSERT INTO param(id, created_at, name, type, functionname) VALUES(-5, current_timestamp, 'valueFalse', 'number', 'If')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-36,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Equality', current_timestamp, 'Dado dos valores retorna si son iguales', 'primitive', 'operator', 'public', 'boolean', -36)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-8,current_timestamp,'val1','number','Equality')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-9,current_timestamp,'val2','number','Equality')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-37,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Inequality', current_timestamp, 'Dado dos valores retorna si son distintos', 'primitive', 'operator', 'public', 'boolean', -37)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-10,current_timestamp,'val1','number','Inequality')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-11,current_timestamp,'val2','number','Inequality')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-38,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Greater', current_timestamp, 'Dado dos valores retorna si el primero es mayor al segundo', 'primitive', 'operator', 'public', 'boolean', -38)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-12,current_timestamp,'val1','number','Greater')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-13,current_timestamp,'val2','number','Greater')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-39,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('GreaterEqual', current_timestamp, 'Dado dos valores retorna si el primero es mayor o igual al segundo', 'primitive', 'operator', 'public', 'boolean', -39)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-14,current_timestamp,'val1','number','GreaterEqual')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-15,current_timestamp,'val2','number','GreaterEqual')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-40,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Less', current_timestamp, 'Dado dos valores retorna si el primero es menor al segundo', 'primitive', 'operator', 'public', 'boolean', -40)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-16,current_timestamp,'val1','number','Less')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-17,current_timestamp,'val2','number','Less')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-41,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('LessEqual', current_timestamp, 'Dado dos valores retorna si el primero es menor o igual al segundo', 'primitive', 'operator', 'public', 'boolean', -41)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-42,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Not', current_timestamp, 'Dada un valor de verdad, devuelve el contrario', 'primitive', 'operator', 'public', 'boolean', -42)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-43,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('And', current_timestamp, 'Dados dos valores de verdad, devuelve el valor de verdad de la conjuncion (Solo es verdadero si ambos son verdaderos)', 'primitive', 'operator', 'public', 'boolean', -43)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-18,current_timestamp,'val2','boolean','And')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-44,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Or', current_timestamp, 'Dados dos valores de verdad, devuelve el valor de verdad de la disyuncion no excluyente (Solo es verdadero si alguno es verdadero)', 'primitive', 'operator', 'public', 'boolean', -44)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-19,current_timestamp,'val1','boolean','Or')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-20,current_timestamp,'val2','boolean','Or')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-45,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Percent', current_timestamp, 'Dado un numero y un porcentaje, devuelve el numero que representa ese porcentaje', 'primitive', 'operator', 'public', 'number', -45)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-21,current_timestamp,'val','number','Percent')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-22,current_timestamp,'percent','number','Percent')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-46,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Diff', current_timestamp, 'Devuelve el primer numero menos el segundo numero', 'primitive', 'operator', 'public', 'number', -46)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-23,current_timestamp,'val1','number','Diff')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-24,current_timestamp,'val2','number','Diff')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-47,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Div', current_timestamp, 'Devuelve el primer numero dividido el segundo numero', 'primitive', 'operator', 'public', 'number', -47)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-25,current_timestamp,'val1','number','Div')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-26,current_timestamp,'val2','number','Div')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-48,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Multi', current_timestamp, 'Devuelve el primer numero multiplicado por el segundo numero', 'primitive', 'operator', 'public', 'number', -48)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-27,current_timestamp,'val','number','Multi')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-28,current_timestamp,'percent','number','Multi')")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-49,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Jornal', current_timestamp, 'Variable Sueldo / 30', 'primitive', 'generic', 'public', 'number', -49)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-50,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('ValorHora', current_timestamp, 'Variables Sueldo / HorasMensuales', 'primitive', 'generic', 'public', 'number', -50)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-51,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('HoraExtra50', current_timestamp, 'Variable ValorHora * 1,5 * Cantidad (será el campo Cantidad Ingresado en una Novedad)', 'primitive', 'generic', 'public', 'number', -51)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-52,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('HoraExtra100', current_timestamp, 'Variable ValorHora * 2 * Cantidad (será el campo Cantidad Ingresado en una Novedad)', 'primitive', 'generic', 'public', 'number', -52)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-53,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Sac', current_timestamp, 'Variable (MejorRemRemunerativaBaseSACSemestre / 2) * DiasSemTrabajados / 180', 'primitive', 'generic', 'public', 'number', -53)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-54,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('SacNoRemunerativo', current_timestamp, 'Variable (MejorRemNoRemunerativaSemestre / 2) * DiasSemTrabajados / 180', 'primitive', 'generic', 'public', 'number', -54)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-55,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Antiguedad', current_timestamp, 'Variable (MejorRemNoRemunerativaSemestre / 2) * DiasSemTrabajados / 180', 'primitive', 'generic', 'public', 'number', -55)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-56,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasFaltasInjustificadas', current_timestamp, '', 'primitive', 'generic', 'public', 'number', -56)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-57,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Vacaciones', current_timestamp, 'Si la antiguedad es menor a 5 entonces le corresponden 14 dias de vacaciones. Entre 5 y 10 le corresponden 21 dias de vacaciones. Entre 10 y 15 le corresponden 28 dias de vacaciones. Mayor a 15 le corresponden 35 dias de vacaciones.', 'primitive', 'generic', 'public', 'number', -57)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-58,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('Preaviso', current_timestamp, '', 'primitive', 'generic', 'public', 'number', -58)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-59,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('SacSinPreaviso', current_timestamp, 'SAC sobre Preaviso', 'primitive', 'generic', 'public', 'number', -59)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-60,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('IntegracionMesDespido', current_timestamp, '( 30 - DiasMesTrabajados ) * Jornal', 'primitive', 'generic', 'public', 'number', -60)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-61,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('SacSinImd', current_timestamp, 'Integración mes Despido / 12', 'primitive', 'generic', 'public', 'number', -61)")

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-62,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('IndemnizacionPorDespido', current_timestamp, '', 'primitive', 'generic', 'public', 'number', -62)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-29,current_timestamp,'val','number','IndemnizacionPorDespido')")
			
			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-63,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('CantidadSueldos', current_timestamp, '', 'primitive', 'generic', 'public', 'number', -63)")



		}

		if versionFunctionDB < 3 {

			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-30,current_timestamp,'val1','number','LessEqual')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-31,current_timestamp,'val2','number','LessEqual')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-32,current_timestamp,'val1','boolean','Not')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-33,current_timestamp,'val1','boolean','And')")

			db.Exec("delete from value where id in (-51, -52, -24, -23)")
			db.Exec("delete from function where name in ('HoraExtra50', 'HoraExtra100', 'FechadeIngreso', 'FechadeLiquidacion')")

		}
		if versionFunctionDB < 4 {

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-64,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('DiasDelSemestre', current_timestamp, 'Cantidad de dias corridos del semestre donde se encuentra utilizada la fórmula. Por ejemplo si la variable se utiliza en una liquidación del primer semestre del 2020 el resultado será 182. (utilizada para el cálculo automático de SAC)', 'primitive', 'helper', 'public', 'number', -64)")


		}

		if versionFunctionDB < 5 {

			db.Exec("ALTER SEQUENCE public.value_id_seq MINVALUE -2000000000")
			db.Exec("ALTER SEQUENCE public.invoke_id_seq MINVALUE -2000000000")
			db.Exec("ALTER SEQUENCE public.param_id_seq MINVALUE -2000000000")
			db.Exec("ALTER SEQUENCE public.value_id_seq RESTART WITH -2000000000")
			db.Exec("ALTER SEQUENCE public.invoke_id_seq RESTART WITH -2000000000")
			db.Exec("ALTER SEQUENCE public.param_id_seq RESTART WITH -2000000000")
		}

		if versionFunctionDB < 6 {

			db.Exec("INSERT INTO value(id, created_at, name, valuenumber, valuestring, valueboolean, valueinvokeid, arginvokeid) VALUES(-65,current_timestamp,'return',0,'',false,null,0)")
			db.Exec("INSERT INTO function(name, created_at, description, origin, type, scope, result, valueid) VALUES('BooleanInequality', current_timestamp, 'Dado dos valores booleanos retorna si son distintos', 'primitive', 'operator', 'public', 'boolean', -65)")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-34,current_timestamp,'val1','boolean','BooleanInequality')")
			db.Exec("INSERT INTO param(id,created_at, name, type, functionname) VALUES(-35,current_timestamp,'val2','boolean','BooleanInequality')")

		}

		if versionFunctionDB < 7 {
			err := CrearFunctionEnMicroservicioFormulas("{ \"name\": \"Vacaciones\", \"CreatedAt\": \"2020-05-04T13:37:55.763839Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.84028Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Si la antiguedad es menor a 5 entonces le corresponden 14 dias de vacaciones.Entre 5 y 10 le corresponden 21 dias de vacacionesEntre 10 y 15 le corresponden 28 dias de vacacionesMayor a 15 le corresponden 35 dias de vacaciones\", \"origin\": \"custom\", \"type\": \"generic\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.762509Z\", \"UpdatedAt\": \"2020-05-04T13:37:55.762509Z\", \"DeletedAt\": null, \"name\": \"\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.69295Z\", \"UpdatedAt\": \"2020-05-04T13:37:55.69295Z\", \"DeletedAt\": null, \"function\": { \"name\": \"If\", \"CreatedAt\": \"2020-04-24T21:13:54.24135Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -7, \"CreatedAt\": \"2020-04-24T21:13:54.242805Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"condicion\", \"type\": \"boolean\", \"functionname\": \"If\" }, { \"ID\": -6, \"CreatedAt\": \"2020-04-24T21:13:54.244226Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"valueTrue\", \"type\": \"number\", \"functionname\": \"If\" }, { \"ID\": -5, \"CreatedAt\": \"2020-04-24T21:13:54.245668Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"valueFalse\", \"type\": \"number\", \"functionname\": \"If\" } ], \"description\": \"Retorna el primer valor si la condicion es verdadera y el segundo valor si la condicion es falsa\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -35, \"CreatedAt\": \"2020-04-24T21:13:54.239828Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -35 }, \"functionname\": \"If\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.714484Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.761506Z\", \"DeletedAt\": null, \"name\": \"condicion\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.695073Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.755597Z\", \"DeletedAt\": null, \"function\": { \"name\": \"LessEqual\", \"CreatedAt\": \"2020-04-24T21:13:54.282005Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -30, \"CreatedAt\": \"2020-04-29T15:33:53.033408Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val1\", \"type\": \"number\", \"functionname\": \"LessEqual\" }, { \"ID\": -31, \"CreatedAt\": \"2020-04-29T15:33:53.037409Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val2\", \"type\": \"number\", \"functionname\": \"LessEqual\" } ], \"description\": \"Dado dos valores retorna si el primero es menor o igual al segundo\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"boolean\", \"value\": { \"ID\": -41, \"CreatedAt\": \"2020-04-24T21:13:54.277353Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -41 }, \"functionname\": \"LessEqual\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.697676Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.758454Z\", \"DeletedAt\": null, \"name\": \"val1\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.696397Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.757062Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Antiguedad\", \"CreatedAt\": \"2020-04-24T21:13:54.349568Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Variable (MejorRemNoRemunerativaSemestre / 2) * DiasSemTrabajados / 180\", \"origin\": \"primitive\", \"type\": \"generic\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -55, \"CreatedAt\": \"2020-04-24T21:13:54.347864Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -55 }, \"functionname\": \"Antiguedad\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 181 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.713107Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.759987Z\", \"DeletedAt\": null, \"name\": \"val2\", \"valuenumber\": 5, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 181 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 196 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.721461Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.769113Z\", \"DeletedAt\": null, \"name\": \"valueTrue\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.715959Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.763077Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Multi\", \"CreatedAt\": \"2020-04-24T21:13:54.324499Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -27, \"CreatedAt\": \"2020-04-24T21:13:54.325985Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val\", \"type\": \"number\", \"functionname\": \"Multi\" }, { \"ID\": -28, \"CreatedAt\": \"2020-04-24T21:13:54.327421Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"percent\", \"type\": \"number\", \"functionname\": \"Multi\" } ], \"description\": \"Devuelve el primer numero multiplicado por el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -48, \"CreatedAt\": \"2020-04-24T21:13:54.323073Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -48 }, \"functionname\": \"Multi\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.718678Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.765914Z\", \"DeletedAt\": null, \"name\": \"val\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.717343Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.76453Z\", \"DeletedAt\": null, \"function\": { \"name\": \"ValorDiasVacaciones\", \"CreatedAt\": \"2020-04-24T21:13:54.14565Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Valor de los días correspondientes a las Vacaciones\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -13, \"CreatedAt\": \"2020-04-24T21:13:54.142806Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -13 }, \"functionname\": \"ValorDiasVacaciones\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 183 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.720101Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.767502Z\", \"DeletedAt\": null, \"name\": \"percent\", \"valuenumber\": 14, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 183 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 196 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.761228Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.83745Z\", \"DeletedAt\": null, \"name\": \"valueFalse\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.722771Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.77066Z\", \"DeletedAt\": null, \"function\": { \"name\": \"If\", \"CreatedAt\": \"2020-04-24T21:13:54.24135Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -7, \"CreatedAt\": \"2020-04-24T21:13:54.242805Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"condicion\", \"type\": \"boolean\", \"functionname\": \"If\" }, { \"ID\": -6, \"CreatedAt\": \"2020-04-24T21:13:54.244226Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"valueTrue\", \"type\": \"number\", \"functionname\": \"If\" }, { \"ID\": -5, \"CreatedAt\": \"2020-04-24T21:13:54.245668Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"valueFalse\", \"type\": \"number\", \"functionname\": \"If\" } ], \"description\": \"Retorna el primer valor si la condicion es verdadera y el segundo valor si la condicion es falsa\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -35, \"CreatedAt\": \"2020-04-24T21:13:54.239828Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -35 }, \"functionname\": \"If\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.729313Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.778358Z\", \"DeletedAt\": null, \"name\": \"condicion\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.724023Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.77224Z\", \"DeletedAt\": null, \"function\": { \"name\": \"LessEqual\", \"CreatedAt\": \"2020-04-24T21:13:54.282005Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -30, \"CreatedAt\": \"2020-04-29T15:33:53.033408Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val1\", \"type\": \"number\", \"functionname\": \"LessEqual\" }, { \"ID\": -31, \"CreatedAt\": \"2020-04-29T15:33:53.037409Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val2\", \"type\": \"number\", \"functionname\": \"LessEqual\" } ], \"description\": \"Dado dos valores retorna si el primero es menor o igual al segundo\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"boolean\", \"value\": { \"ID\": -41, \"CreatedAt\": \"2020-04-24T21:13:54.277353Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -41 }, \"functionname\": \"LessEqual\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.726609Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.77528Z\", \"DeletedAt\": null, \"name\": \"val1\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.72533Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.773716Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Antiguedad\", \"CreatedAt\": \"2020-04-24T21:13:54.349568Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Variable (MejorRemNoRemunerativaSemestre / 2) * DiasSemTrabajados / 180\", \"origin\": \"primitive\", \"type\": \"generic\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -55, \"CreatedAt\": \"2020-04-24T21:13:54.347864Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -55 }, \"functionname\": \"Antiguedad\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 185 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.727903Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.776851Z\", \"DeletedAt\": null, \"name\": \"val2\", \"valuenumber\": 10, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 185 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 195 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.736406Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.786142Z\", \"DeletedAt\": null, \"name\": \"valueTrue\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.730731Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.779965Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Multi\", \"CreatedAt\": \"2020-04-24T21:13:54.324499Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -27, \"CreatedAt\": \"2020-04-24T21:13:54.325985Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val\", \"type\": \"number\", \"functionname\": \"Multi\" }, { \"ID\": -28, \"CreatedAt\": \"2020-04-24T21:13:54.327421Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"percent\", \"type\": \"number\", \"functionname\": \"Multi\" } ], \"description\": \"Devuelve el primer numero multiplicado por el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -48, \"CreatedAt\": \"2020-04-24T21:13:54.323073Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -48 }, \"functionname\": \"Multi\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.733533Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.783006Z\", \"DeletedAt\": null, \"name\": \"val\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.732137Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.78152Z\", \"DeletedAt\": null, \"function\": { \"name\": \"ValorDiasVacaciones\", \"CreatedAt\": \"2020-04-24T21:13:54.14565Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Valor de los días correspondientes a las Vacaciones\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -13, \"CreatedAt\": \"2020-04-24T21:13:54.142806Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -13 }, \"functionname\": \"ValorDiasVacaciones\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 187 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.734963Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.784618Z\", \"DeletedAt\": null, \"name\": \"percent\", \"valuenumber\": 21, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 187 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 195 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.759885Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.835895Z\", \"DeletedAt\": null, \"name\": \"valueFalse\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.737867Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.81102Z\", \"DeletedAt\": null, \"function\": { \"name\": \"If\", \"CreatedAt\": \"2020-04-24T21:13:54.24135Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -7, \"CreatedAt\": \"2020-04-24T21:13:54.242805Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"condicion\", \"type\": \"boolean\", \"functionname\": \"If\" }, { \"ID\": -6, \"CreatedAt\": \"2020-04-24T21:13:54.244226Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"valueTrue\", \"type\": \"number\", \"functionname\": \"If\" }, { \"ID\": -5, \"CreatedAt\": \"2020-04-24T21:13:54.245668Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"valueFalse\", \"type\": \"number\", \"functionname\": \"If\" } ], \"description\": \"Retorna el primer valor si la condicion es verdadera y el segundo valor si la condicion es falsa\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -35, \"CreatedAt\": \"2020-04-24T21:13:54.239828Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -35 }, \"functionname\": \"If\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.744627Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.819108Z\", \"DeletedAt\": null, \"name\": \"condicion\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.739265Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.812829Z\", \"DeletedAt\": null, \"function\": { \"name\": \"LessEqual\", \"CreatedAt\": \"2020-04-24T21:13:54.282005Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -30, \"CreatedAt\": \"2020-04-29T15:33:53.033408Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val1\", \"type\": \"number\", \"functionname\": \"LessEqual\" }, { \"ID\": -31, \"CreatedAt\": \"2020-04-29T15:33:53.037409Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val2\", \"type\": \"number\", \"functionname\": \"LessEqual\" } ], \"description\": \"Dado dos valores retorna si el primero es menor o igual al segundo\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"boolean\", \"value\": { \"ID\": -41, \"CreatedAt\": \"2020-04-24T21:13:54.277353Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -41 }, \"functionname\": \"LessEqual\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.742083Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.816061Z\", \"DeletedAt\": null, \"name\": \"val1\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.740784Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.814445Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Antiguedad\", \"CreatedAt\": \"2020-04-24T21:13:54.349568Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Variable (MejorRemNoRemunerativaSemestre / 2) * DiasSemTrabajados / 180\", \"origin\": \"primitive\", \"type\": \"generic\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -55, \"CreatedAt\": \"2020-04-24T21:13:54.347864Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -55 }, \"functionname\": \"Antiguedad\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 189 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.743374Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.817695Z\", \"DeletedAt\": null, \"name\": \"val2\", \"valuenumber\": 15, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 189 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 194 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.752199Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.826883Z\", \"DeletedAt\": null, \"name\": \"valueTrue\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.746028Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.820612Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Multi\", \"CreatedAt\": \"2020-04-24T21:13:54.324499Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -27, \"CreatedAt\": \"2020-04-24T21:13:54.325985Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val\", \"type\": \"number\", \"functionname\": \"Multi\" }, { \"ID\": -28, \"CreatedAt\": \"2020-04-24T21:13:54.327421Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"percent\", \"type\": \"number\", \"functionname\": \"Multi\" } ], \"description\": \"Devuelve el primer numero multiplicado por el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -48, \"CreatedAt\": \"2020-04-24T21:13:54.323073Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -48 }, \"functionname\": \"Multi\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.749173Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.823581Z\", \"DeletedAt\": null, \"name\": \"val\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.747878Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.822187Z\", \"DeletedAt\": null, \"function\": { \"name\": \"ValorDiasVacaciones\", \"CreatedAt\": \"2020-04-24T21:13:54.14565Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Valor de los días correspondientes a las Vacaciones\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -13, \"CreatedAt\": \"2020-04-24T21:13:54.142806Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -13 }, \"functionname\": \"ValorDiasVacaciones\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 191 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.750503Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.825352Z\", \"DeletedAt\": null, \"name\": \"percent\", \"valuenumber\": 28, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 191 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 194 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.758608Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.834433Z\", \"DeletedAt\": null, \"name\": \"valueFalse\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.753583Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.828323Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Multi\", \"CreatedAt\": \"2020-04-24T21:13:54.324499Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -27, \"CreatedAt\": \"2020-04-24T21:13:54.325985Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val\", \"type\": \"number\", \"functionname\": \"Multi\" }, { \"ID\": -28, \"CreatedAt\": \"2020-04-24T21:13:54.327421Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"percent\", \"type\": \"number\", \"functionname\": \"Multi\" } ], \"description\": \"Devuelve el primer numero multiplicado por el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -48, \"CreatedAt\": \"2020-04-24T21:13:54.323073Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -48 }, \"functionname\": \"Multi\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.756049Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.831427Z\", \"DeletedAt\": null, \"name\": \"val\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.754855Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.829803Z\", \"DeletedAt\": null, \"function\": { \"name\": \"ValorDiasVacaciones\", \"CreatedAt\": \"2020-04-24T21:13:54.14565Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Valor de los días correspondientes a las Vacaciones\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -13, \"CreatedAt\": \"2020-04-24T21:13:54.142806Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -13 }, \"functionname\": \"ValorDiasVacaciones\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 193 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-04T13:37:55.757327Z\", \"UpdatedAt\": \"2020-05-04T21:00:44.832947Z\", \"DeletedAt\": null, \"name\": \"percent\", \"valuenumber\": 35, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 193 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 194 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 195 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 196 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 0 }, \"valueid\": 0, \"valueinvokeid\": 0 }")
			if err != nil {
				return err
			}

			err = CrearFunctionEnMicroservicioFormulas("{ \"name\": \"Sac\", \"CreatedAt\": \"2020-05-07T14:26:30.133562Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.133562Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"(MejorRemRemunerativaBaseSACSemestre/2)*(DiasSemTrabajados/DiasDelSemestre)\", \"origin\": \"custom\", \"type\": \"generic\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.132532Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.132532Z\", \"DeletedAt\": null, \"name\": \"\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.119491Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.119491Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Multi\", \"CreatedAt\": \"2020-04-24T21:13:54.324499Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -27, \"CreatedAt\": \"2020-04-24T21:13:54.325985Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val\", \"type\": \"number\", \"functionname\": \"Multi\" }, { \"ID\": -28, \"CreatedAt\": \"2020-04-24T21:13:54.327421Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"percent\", \"type\": \"number\", \"functionname\": \"Multi\" } ], \"description\": \"Devuelve el primer numero multiplicado por el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -48, \"CreatedAt\": \"2020-04-24T21:13:54.323073Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -48 }, \"functionname\": \"Multi\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.125457Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.125457Z\", \"DeletedAt\": null, \"name\": \"val\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.121238Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.121238Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Div\", \"CreatedAt\": \"2020-04-24T21:13:54.318823Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -25, \"CreatedAt\": \"2020-04-24T21:13:54.320286Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val1\", \"type\": \"number\", \"functionname\": \"Div\" }, { \"ID\": -26, \"CreatedAt\": \"2020-04-24T21:13:54.321675Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val2\", \"type\": \"number\", \"functionname\": \"Div\" } ], \"description\": \"Devuelve el primer numero dividido el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -47, \"CreatedAt\": \"2020-04-24T21:13:54.317357Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -47 }, \"functionname\": \"Div\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.123242Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.123242Z\", \"DeletedAt\": null, \"name\": \"val1\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.122267Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.122267Z\", \"DeletedAt\": null, \"function\": { \"name\": \"MejorRemRemunerativaBaseSACSemestre\", \"CreatedAt\": \"2020-04-24T21:13:54.23007Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Mejor Remuneración del Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre), comparando grillas de Remunerativo - Descuentos solo de los conceptos que tienen configurado BASE_SAC = SI\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -33, \"CreatedAt\": \"2020-04-24T21:13:54.228538Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -33 }, \"functionname\": \"MejorRemRemunerativaBaseSACSemestre\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 259 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.124525Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.124525Z\", \"DeletedAt\": null, \"name\": \"val2\", \"valuenumber\": 2, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 259 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 258 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.131428Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.131428Z\", \"DeletedAt\": null, \"name\": \"percent\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.12654Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.12654Z\", \"DeletedAt\": null, \"function\": { \"name\": \"Div\", \"CreatedAt\": \"2020-04-24T21:13:54.318823Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [ { \"ID\": -25, \"CreatedAt\": \"2020-04-24T21:13:54.320286Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val1\", \"type\": \"number\", \"functionname\": \"Div\" }, { \"ID\": -26, \"CreatedAt\": \"2020-04-24T21:13:54.321675Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"val2\", \"type\": \"number\", \"functionname\": \"Div\" } ], \"description\": \"Devuelve el primer numero dividido el segundo numero\", \"origin\": \"primitive\", \"type\": \"operator\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -47, \"CreatedAt\": \"2020-04-24T21:13:54.317357Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -47 }, \"functionname\": \"Div\", \"args\": [ { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.128409Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.128409Z\", \"DeletedAt\": null, \"name\": \"val1\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.127481Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.127481Z\", \"DeletedAt\": null, \"function\": { \"name\": \"DiasSemTrabajados\", \"CreatedAt\": \"2020-04-24T21:13:54.138341Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Dias Trabajados en el Semestre (Semestre 1: Enero - Junio | Semestre 2: Julio - Diciembre)\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -11, \"CreatedAt\": \"2020-04-24T21:13:54.136906Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -11 }, \"functionname\": \"DiasSemTrabajados\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 261 }, { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.130401Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.130401Z\", \"DeletedAt\": null, \"name\": \"val2\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": { \"ID\": 0, \"CreatedAt\": \"2020-05-07T14:26:30.129402Z\", \"UpdatedAt\": \"2020-05-07T14:26:30.129402Z\", \"DeletedAt\": null, \"function\": { \"name\": \"DiasDelSemestre\", \"CreatedAt\": \"2020-05-06T20:00:34.804702Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"params\": [], \"description\": \"Cantidad de dias corridos del semestre donde se encuentra utilizada la fórmula. Por ejemplo si la variable se utiliza en una liquidación del primer semestre del 2020 el resultado será 182. (utilizada para el cálculo automático de SAC)\", \"origin\": \"primitive\", \"type\": \"helper\", \"scope\": \"public\", \"result\": \"number\", \"value\": { \"ID\": -64, \"CreatedAt\": \"2020-05-06T20:00:34.801406Z\", \"UpdatedAt\": \"0001-01-01T00:00:00Z\", \"DeletedAt\": null, \"name\": \"return\", \"valuenumber\": 0, \"valuestring\": \"\", \"Valueboolean\": false, \"valueinvoke\": null, \"valueinvokeid\": null, \"arginvokeid\": 0 }, \"valueid\": -64 }, \"functionname\": \"DiasDelSemestre\", \"args\": [] }, \"valueinvokeid\": 0, \"arginvokeid\": 261 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 258 } ] }, \"valueinvokeid\": 0, \"arginvokeid\": 0 }, \"valueid\": 0, \"valueinvokeid\": 0 }")
			if err != nil {
				return err
			}

		}

	}
	return err
}

func ObtenerFormulasPublicas(db *gorm.DB) error {
	/*var formulas []structFunction.Function

	db_public := conexionBD.ObtenerDB("public")

	db_public.Set("gorm:auto_preload", true).Find(&formulas)
	for i := 0; i < len(formulas); i++ {
		formula := formulas[i]

		params := formula.Params

		formula.Params = nil
		if err := db.Save(&formula.Value).Error; err != nil {
			return err
		}
		if err := db.Save(&formula).Error; err != nil {
			return err
		}
		for _, param := range params {
			if err := db.Save(&param).Error; err != nil {
				return err
			}
		}
	}

	return nil*/

	db.Exec("select ST_copy_formulas_public_privado()")
	return nil
}
